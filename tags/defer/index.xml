<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Defer on My New Hugo Site</title>
    <link>http://localhost:1313/tags/defer/</link>
    <description>Recent content in Defer on My New Hugo Site</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 20 Dec 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/defer/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>solidity语法</title>
      <link>http://localhost:1313/post/%E5%8C%BA%E5%9D%97%E9%93%BE/solidity%E8%AF%AD%E6%B3%95/index.zh-cn/</link>
      <pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/%E5%8C%BA%E5%9D%97%E9%93%BE/solidity%E8%AF%AD%E6%B3%95/index.zh-cn/</guid>
      <description>类型 引用类型 memory内存 声明周期只存在于函数调用期间 storage存储 状态变量保存的位置，gas开销最大 calldata调用数据 用于函数参数不可变存储区域 abi编码 abi：application binary interface 应用程序二进制接口 abi接口：定义如何与合约交互 abi编码 函数选择器：对函数签名计算keccak-256哈希，取前4个字节 参数编码： 调用一个合约函数 = 向合约地址发送一个交易（交易的内容就是ABI编码数据）&#xA;修饰符 view 修饰函数（视图函数）不修改状态 pure 修饰函数（纯函数）不修改状态，不读取状态，跟合约状态无关 payable 表示函数可以被支付eth，支付的eth值用msg.value 获取 modifier 函数修改器，用来修饰其他函数 继承 使用关键字 is 部署合约的时候只会生成一个合约，基类合约的代码会被编译进子类合约 除了private修饰的变量或者函数，其他子类都可以访问 抽象合约 不可以被单独部署，使用关键字 abstract 修饰 函数没有实现，使用 virtual 修饰，表示函数可以被重载 抽象合约可以作为基类，子类可以通过重载(使用关键字override)实现基类的函数，override表示重写了父类合约函数 调用父合约函数使用 super.xxx 库 定义库使用关键字 library polygon网络是matic网络改名来的，polygon不是专有区块链，它是以太坊区块链之上的第2层&#xA;Mumbai 是polygon的测试网&#xA;因此，Polygon可以与其他竞争网络相提并论，例如Solana、 Polkadot、Cosmos和Avalanche。&#xA;传统应用 前端 《===============》 后端服务器&#xA;web3应用 ABI和字节码 合约 ABI 是与 EVM 字节码交互的接口 ABI包括了函数的结构和实参 因为evm里面存放的是字节码（源码编译来的），字节码也需要调用函数。所以有了ABI用来交互和字节码。 wagmi&#xA;数据平台 Thegraph&#xA;Dune</description>
    </item>
    <item>
      <title>关键字defer</title>
      <link>http://localhost:1313/post/golang/defer%E8%AF%AD%E5%8F%A5/index.zh-cn/</link>
      <pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/golang/defer%E8%AF%AD%E5%8F%A5/index.zh-cn/</guid>
      <description>defer延迟函数,在函数或方法执行完成的最后调用，defer函数可以有多个。defer函数执行过程可以分两部分，多个defer函数先按照先后顺序入栈，最后执行的时候从栈中取出执行，多个defer的执行顺序是先入后出的。&#xA;案例1 func f1() int { var i int defer func() { i++ }() return i } func main() { fmt.Println(f1()) //执行结果 0 } 匿名返回值的时候，执行 return i的时候会重新创建一个局部变量，用来给返回值赋值，类似 result:=i ,这个result就是最终的返回值，因为defer是在return后面执行，所以在defer里面的i++是在赋值之后的语句，不会影响返回值。&#xA;案例2 func f2() (r int) { defer func() { r++ }() return r } func main() { fmt.Println(f2()) //执行结果 1 } 返回值不是匿名的，不需要赋值。所以defer里面修改值会影响到最终的返回值。&#xA;案例3 func f3() (r int) { defer func(a int) { fmt.Println(&amp;#34;r:&amp;#34;, r) r *= a fmt.Println(&amp;#34;a:&amp;#34;, a) }(r) return 2 } func main() { fmt.</description>
    </item>
    <item>
      <title>关键字defer</title>
      <link>http://localhost:1313/post/%E5%8C%BA%E5%9D%97%E9%93%BE/foundry%E4%BD%BF%E7%94%A8/index.zh-cn/</link>
      <pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/%E5%8C%BA%E5%9D%97%E9%93%BE/foundry%E4%BD%BF%E7%94%A8/index.zh-cn/</guid>
      <description>安装 在mac系统下 执行 curl -L https://foundry.paradigm.xyz | bash 如果提示 安装 libusb，执行 brew install libusb 重启一个终端或者更新下环境变量的设置。然后执行 foundryup 命令 有三种命令&#xA;forge 可用来测试、构建和部署您的智能合约。 项目 新建项目 在想要存放项目的目录下 执行 forge init hello_foundry ，会创建一个默认的模版项目 如果使用指定的模版项目可以使用 forge init --template https://github.com/foundry-rs/forge-template hello_template 有四个目录，lib 存放依赖库，src 存放自己写的合约源码的地方。script 是存放一些脚本。test编写测试用例。 模版默认安装了一个依赖项：forge-std，这是用于 Foundry 项目的首选测试库。可以在lib目录下看到。 cd hello_foundry开始工作 已有项目 先克隆项目 git clone https://github.com/abigger87/femplate cd femplate 切换到项目目录下。 安装依赖项 forge install 会把所有的第三方依赖库下载下来。 依赖 foundry没有自己的项目依赖工具，使用git submodules 管理依赖项。&#xA;安装依赖 要导入第三方依赖库可以使用 forge install OpenZeppelin/openzeppelin-contracts ,具体使用的时候，在需要导入的.sol文件import。如果不清楚路径，可以使用 forge remappings 命令，会帮你映射路径，使路径变短方便引用。也可以自定义映射路径，需要在项目根目录新建一个 remappings.txt 文件, 然后把需要映射的路径写入，比如 solmate-utils/=lib/solmate/src/utils/, 如果要使用 solmate的utils目录下的文件，就可以 import &amp;quot;solmate-utils/SignedWadMath.</description>
    </item>
  </channel>
</rss>
