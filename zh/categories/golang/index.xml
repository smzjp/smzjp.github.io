<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on 我的 Hugo 网站</title>
    <link>http://localhost:1313/zh/categories/golang/</link>
    <description>Recent content in Golang on 我的 Hugo 网站</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 09 Apr 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/zh/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>算法之递归</title>
      <link>http://localhost:1313/zh/post/golang/%E7%AE%97%E6%B3%95%E4%B9%8B%E9%80%92%E5%BD%92/index.zh-cn/</link>
      <pubDate>Tue, 09 Apr 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/zh/post/golang/%E7%AE%97%E6%B3%95%E4%B9%8B%E9%80%92%E5%BD%92/index.zh-cn/</guid>
      <description>递归一般有两种思路，一种是递，另一种是归。递是传递的意思，从递归开始的根节点开始计算，把计算数值通过递归函数的参数传递给下一个子节点，比如是用前序遍历，先计算跟节点，再计算左子树（先计算左子树里面的根节点），最后计算右子树。归是回归的意思，从叶子节点开始计算，把计算数值通过递归函数的返回参数返回给前一个父节点。也可以这么理解，递归算法都包含递和归的过程。如果是在递的过程中计算数值，就称为递的思想，如果是在归的过程中计算数值，就称为归的思想。&#xA;例子1，leetcode 1026题 给定二叉树的根节点 root，找出存在于 不同 节点 A 和 B 之间的最大值 V，其中 V = |A.val - B.val|，且 A 是 B 的祖先。&#xA;（如果 A 的任何子节点之一为 B，或者 A 的任何子节点是 B 的祖先，那么我们认为 A 是 B 的祖先）&#xA;递的思想(摘自leetcode题解) func maxAncestorDiff(root *TreeNode) (ans int) { var dfs func(*TreeNode, int, int) dfs = func(node *TreeNode, mn, mx int) { if node == nil { return } mn = min(mn, node.Val) mx = max(mx, node.Val) ans = max(ans, node.</description>
    </item>
    <item>
      <title>算法之二分查找</title>
      <link>http://localhost:1313/zh/post/golang/%E7%AE%97%E6%B3%95%E4%B9%8B%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/index.zh-cn/</link>
      <pubDate>Sat, 11 Nov 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/zh/post/golang/%E7%AE%97%E6%B3%95%E4%B9%8B%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/index.zh-cn/</guid>
      <description>有序数组的元素不重复，查找指定的目标元素 arr := []int{1, 2, 3, 4, 6, 9} target := 2 left := 0 right := len(arr) - 1 for left &amp;lt; right { mid := (left + right) / 2 fmt.Println(&amp;#34;mid:&amp;#34;, mid) if arr[mid] == target { right = mid } else if arr[mid] &amp;lt; target { left = mid + 1 } else if arr[mid] &amp;gt; target { right = mid - 1 } } fmt.Println(&amp;#34;left:&amp;#34;, left) 有序数组的元素会重复，查找指定的目标元素的左边界。 arr := []int{1, 2, 2, 2, 2, 3, 4, 6, 9} target := 2 if len(arr) == 0 { fmt.</description>
    </item>
    <item>
      <title>爬虫框架之colly</title>
      <link>http://localhost:1313/zh/post/golang/%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E4%B9%8Bcolly/index.zh-cn/</link>
      <pubDate>Fri, 14 Apr 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/zh/post/golang/%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E4%B9%8Bcolly/index.zh-cn/</guid>
      <description></description>
    </item>
    <item>
      <title>爬虫框架之goquery</title>
      <link>http://localhost:1313/zh/post/golang/%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E4%B9%8Bgoquery/index.zh-cn/</link>
      <pubDate>Tue, 11 Apr 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/zh/post/golang/%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E4%B9%8Bgoquery/index.zh-cn/</guid>
      <description>goquery 是用来html解析的，基于github.com/andybalholm/cascadia和golang.org/x/net/html库，使用的是css选择器语法来查找标签。&#xA;安装 go get -u github.com/PuerkitoBio/goquery&#xA;使用 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;github.com/PuerkitoBio/goquery&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; ) func main() { res, err := http.Get(&amp;#34;http://www.baidu.com&amp;#34;) if err != nil { log.Fatal(err) } defer res.Body.Close() if res.StatusCode != 200 { log.Fatalf(&amp;#34;status code error: %d&amp;#34;, res.StatusCode) } doc, err := goquery.NewDocumentFromReader(res.Body) if err != nil { log.Fatal(err) } doc.Find(&amp;#34;.s-hotsearch-content .hotsearch-item&amp;#34;).Each(func(i int, s *goquery.Selection) { content := s.Find(&amp;#34;.title-content-title&amp;#34;).Text() fmt.Printf(&amp;#34;%d: %s \n&amp;#34;, i, content) href, suc := s.</description>
    </item>
    <item>
      <title>爬虫框架之pholcus</title>
      <link>http://localhost:1313/zh/post/golang/%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E4%B9%8Bsoup%E7%9A%84%E5%89%AF%E6%9C%AC/index.zh-cn/</link>
      <pubDate>Mon, 10 Apr 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/zh/post/golang/%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E4%B9%8Bsoup%E7%9A%84%E5%89%AF%E6%9C%AC/index.zh-cn/</guid>
      <description>https://github.com/andeya/pholcus</description>
    </item>
    <item>
      <title>爬虫框架之soup</title>
      <link>http://localhost:1313/zh/post/golang/%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E4%B9%8Bsoup/index.zh-cn/</link>
      <pubDate>Mon, 10 Apr 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/zh/post/golang/%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E4%B9%8Bsoup/index.zh-cn/</guid>
      <description>soup是用来解析，提取html数据的库，它是基于html解析库golang.org/x/net/html。类似于python中的BeautifulSoup库，这个库比较小，总共只有500多行代码。&#xA;下面是其所提供的所有方法&#xA;var Headers map[string]string // Set headers as a map of key-value pairs, an alternative to calling Header() individually var Cookies map[string]string // Set cookies as a map of key-value pairs, an alternative to calling Cookie() individually func Get(string) (string,error) {} // Takes the url as an argument, returns HTML string func GetWithClient(string, *http.Client) {} // Takes the url and a custom HTTP client as arguments, returns HTML string func Post(string, string, interface{}) (string, error) {} // Takes the url, bodyType, and payload as an argument, returns HTML string func PostForm(string, url.</description>
    </item>
    <item>
      <title>单例模式</title>
      <link>http://localhost:1313/zh/post/golang/%E5%8D%95%E4%BE%8B/index.zh-cn/</link>
      <pubDate>Mon, 20 Mar 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/zh/post/golang/%E5%8D%95%E4%BE%8B/index.zh-cn/</guid>
      <description>​&#x9;单例有两种模式，一种是饿汉模式，另一种是懒汉模式&#xA;饿汉模式 饿汉模式，在调用之前初始化，所以一般在init中初始化。&#xA;type singleton struct { count int } var Instance = new(singleton) func (s *singleton) Add() int { s.count++ return s.count } func main() { //使用，go一般使用饿汉模式 fmt.Println(Instance.Add()) } 懒汉模式 懒汉模式，首次调用的时候初始化，使用懒加载的方式初始化。&#xA;type singleton02 struct { count int } var ( instance *singleton02 mutext sync.Mutex ) func New() *singleton02 { if instance == nil { //需要加锁，保证线程安全 mutext.Lock() if instance == nil { instance = new(singleton02) } mutext.Unlock() } return instance } func (s *singleton02) Add() int { s.</description>
    </item>
    <item>
      <title>关键字iota</title>
      <link>http://localhost:1313/zh/post/golang/%E6%9E%9A%E4%B8%BEiota/index.zh-cn/</link>
      <pubDate>Mon, 20 Mar 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/zh/post/golang/%E6%9E%9A%E4%B8%BEiota/index.zh-cn/</guid>
      <description>案例1 const ( x = iota _ y z = &amp;#34;zz&amp;#34; k p = iota ) func main() { fmt.Println(&amp;#34;枚举&amp;#34;, x, y, z, k, p) //输出： 枚举 0 2 zz zz 5 } 这里要注意两个地方&#xA;iota可以理解为const的行索引或行下标，下标从0开始。 如果某一行没赋值，默认是跟上一行的表达式一样。 案例2 const ( //这个要注意 0左移一位是1 A1 = 1 &amp;lt;&amp;lt; iota B1 C1 D1 E1 = iota * iota F1 G1 ) func main() { fmt.Println(&amp;#34;A1:&amp;#34;, A1, &amp;#34;B1:&amp;#34;, B1, &amp;#34;C1:&amp;#34;, C1, &amp;#34;D1:&amp;#34;, D1, &amp;#34;E1:&amp;#34;, E1) // A1: 1 B1: 2 C1: 4 D1: 8 E1: 16 } 这里需要注意一个地方</description>
    </item>
    <item>
      <title>golang语法</title>
      <link>http://localhost:1313/zh/post/golang/golang%E8%AF%AD%E6%B3%95/index.zh-cn/</link>
      <pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/zh/post/golang/golang%E8%AF%AD%E6%B3%95/index.zh-cn/</guid>
      <description>基础语法 注释 单行注释&#xA;//单行注释 fmt.Println(&amp;#34;hello world&amp;#34;) 多行注释&#xA;/* 多行注释 多行注释 */ fmt.Println(&amp;#34;hello world too&amp;#34;) 变量 变量赋值的三种方式&#xA;//先声明 var x int8 //再赋值 x = 100 //声明并且赋值 var y = 100 //简写形式 相当于 var z = 300 z := 300 同时声明多个变量&#xA;//一行同时声明赋值多个变量 var name, age = &amp;#34;qu&amp;#34;, 22 值拷贝&#xA;一个变量赋值给另一个变量时，会发生值拷贝。&#xA;//值拷贝 var a = 100 //一个变量赋值给另一个变量时，会发生值拷贝 var b = a //是两个独立的内存空间，不会相互影响 a = 200 fmt.Println(b) 匿名变量&#xA;如果不使用某个变量，可以用_下划线代替&#xA;//匿名变量 var _, b = 100, 200 变量的命名</description>
    </item>
    <item>
      <title>golang语法</title>
      <link>http://localhost:1313/zh/post/golang/golang%E8%AF%AD%E6%B3%95tips/index.zh-cn/</link>
      <pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/zh/post/golang/golang%E8%AF%AD%E6%B3%95tips/index.zh-cn/</guid>
      <description>这篇文章主要整理一些在做算法的过程中发现的一些需要注意的语法点。记录下来加深理解，查看。&#xA;1.切片初始化 切片初始化一般有两种方式，根据是否需要初始值。&#xA;//方式1 var arr01 []int fmt.Println(&amp;#34;arr01:&amp;#34;, arr01) //方式02 arr02 := make([]int, 3) fmt.Println(&amp;#34;arr02:&amp;#34;, arr02) //方式03 arr03 := []int{1, 2, 3} fmt.Println(&amp;#34;arr03:&amp;#34;, arr03) //结果 arr01: [] arr02: [0 0 0] arr03: [1 2 3] </description>
    </item>
    <item>
      <title>solidity语法</title>
      <link>http://localhost:1313/zh/post/%E5%8C%BA%E5%9D%97%E9%93%BE/solidity%E8%AF%AD%E6%B3%95/index.zh-cn/</link>
      <pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/zh/post/%E5%8C%BA%E5%9D%97%E9%93%BE/solidity%E8%AF%AD%E6%B3%95/index.zh-cn/</guid>
      <description>类型 引用类型 memory内存 声明周期只存在于函数调用期间 storage存储 状态变量保存的位置，gas开销最大 calldata调用数据 用于函数参数不可变存储区域 abi编码 abi：application binary interface 应用程序二进制接口 abi接口：定义如何与合约交互 abi编码 函数选择器：对函数签名计算keccak-256哈希，取前4个字节 参数编码： 调用一个合约函数 = 向合约地址发送一个交易（交易的内容就是ABI编码数据）&#xA;修饰符 view 修饰函数（视图函数）不修改状态 pure 修饰函数（纯函数）不修改状态，不读取状态，跟合约状态无关 payable 表示函数可以被支付eth，支付的eth值用msg.value 获取 modifier 函数修改器，用来修饰其他函数 继承 使用关键字 is 部署合约的时候只会生成一个合约，基类合约的代码会被编译进子类合约 除了private修饰的变量或者函数，其他子类都可以访问 抽象合约 不可以被单独部署，使用关键字 abstract 修饰 函数没有实现，使用 virtual 修饰，表示函数可以被重载 抽象合约可以作为基类，子类可以通过重载(使用关键字override)实现基类的函数，override表示重写了父类合约函数 调用父合约函数使用 super.xxx 库 定义库使用关键字 library polygon网络是matic网络改名来的，polygon不是专有区块链，它是以太坊区块链之上的第2层&#xA;Mumbai 是polygon的测试网&#xA;因此，Polygon可以与其他竞争网络相提并论，例如Solana、 Polkadot、Cosmos和Avalanche。&#xA;传统应用 前端 《===============》 后端服务器&#xA;web3应用 ABI和字节码 合约 ABI 是与 EVM 字节码交互的接口 ABI包括了函数的结构和实参 因为evm里面存放的是字节码（源码编译来的），字节码也需要调用函数。所以有了ABI用来交互和字节码。 wagmi&#xA;数据平台 Thegraph&#xA;Dune</description>
    </item>
    <item>
      <title>关键字defer</title>
      <link>http://localhost:1313/zh/post/golang/defer%E8%AF%AD%E5%8F%A5/index.zh-cn/</link>
      <pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/zh/post/golang/defer%E8%AF%AD%E5%8F%A5/index.zh-cn/</guid>
      <description>defer延迟函数,在函数或方法执行完成的最后调用，defer函数可以有多个。defer函数执行过程可以分两部分，多个defer函数先按照先后顺序入栈，最后执行的时候从栈中取出执行，多个defer的执行顺序是先入后出的。&#xA;案例1 func f1() int { var i int defer func() { i++ }() return i } func main() { fmt.Println(f1()) //执行结果 0 } 匿名返回值的时候，执行 return i的时候会重新创建一个局部变量，用来给返回值赋值，类似 result:=i ,这个result就是最终的返回值，因为defer是在return后面执行，所以在defer里面的i++是在赋值之后的语句，不会影响返回值。&#xA;案例2 func f2() (r int) { defer func() { r++ }() return r } func main() { fmt.Println(f2()) //执行结果 1 } 返回值不是匿名的，不需要赋值。所以defer里面修改值会影响到最终的返回值。&#xA;案例3 func f3() (r int) { defer func(a int) { fmt.Println(&amp;#34;r:&amp;#34;, r) r *= a fmt.Println(&amp;#34;a:&amp;#34;, a) }(r) return 2 } func main() { fmt.</description>
    </item>
    <item>
      <title>关键字defer</title>
      <link>http://localhost:1313/zh/post/%E5%8C%BA%E5%9D%97%E9%93%BE/foundry%E4%BD%BF%E7%94%A8/index.zh-cn/</link>
      <pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/zh/post/%E5%8C%BA%E5%9D%97%E9%93%BE/foundry%E4%BD%BF%E7%94%A8/index.zh-cn/</guid>
      <description>安装 在mac系统下 执行 curl -L https://foundry.paradigm.xyz | bash 如果提示 安装 libusb，执行 brew install libusb 重启一个终端或者更新下环境变量的设置。然后执行 foundryup 命令 有三种命令&#xA;forge 可用来测试、构建和部署您的智能合约。 项目 新建项目 在想要存放项目的目录下 执行 forge init hello_foundry ，会创建一个默认的模版项目 如果使用指定的模版项目可以使用 forge init --template https://github.com/foundry-rs/forge-template hello_template 有四个目录，lib 存放依赖库，src 存放自己写的合约源码的地方。script 是存放一些脚本。test编写测试用例。 模版默认安装了一个依赖项：forge-std，这是用于 Foundry 项目的首选测试库。可以在lib目录下看到。 cd hello_foundry开始工作 已有项目 先克隆项目 git clone https://github.com/abigger87/femplate cd femplate 切换到项目目录下。 安装依赖项 forge install 会把所有的第三方依赖库下载下来。 依赖 foundry没有自己的项目依赖工具，使用git submodules 管理依赖项。&#xA;安装依赖 要导入第三方依赖库可以使用 forge install OpenZeppelin/openzeppelin-contracts ,具体使用的时候，在需要导入的.sol文件import。如果不清楚路径，可以使用 forge remappings 命令，会帮你映射路径，使路径变短方便引用。也可以自定义映射路径，需要在项目根目录新建一个 remappings.txt 文件, 然后把需要映射的路径写入，比如 solmate-utils/=lib/solmate/src/utils/, 如果要使用 solmate的utils目录下的文件，就可以 import &amp;quot;solmate-utils/SignedWadMath.</description>
    </item>
    <item>
      <title>使用go开发app</title>
      <link>http://localhost:1313/zh/post/golang/%E4%BD%BF%E7%94%A8go%E5%BC%80%E5%8F%91app/index.zh-cn/</link>
      <pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/zh/post/golang/%E4%BD%BF%E7%94%A8go%E5%BC%80%E5%8F%91app/index.zh-cn/</guid>
      <description>https://github.com/progrium/macdriver&#xA;https://yusank.space/posts/macapp-by-go/&#xA;https://www.kandaoni.com/news/14849.html&#xA;https://developer.fyne.io/</description>
    </item>
    <item>
      <title>算法之优先队列</title>
      <link>http://localhost:1313/zh/post/golang/%E7%AE%97%E6%B3%95%E4%B9%8B%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/index.zh-cn/</link>
      <pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/zh/post/golang/%E7%AE%97%E6%B3%95%E4%B9%8B%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/index.zh-cn/</guid>
      <description>优先队列用来求数组里面的前n个最大，最小值很有用。&#xA;最小堆 最大最小堆是一种数据结构，用于在数据集合中快速找到最大或最小元素。堆是一种二叉树，其中每个父节点的值都大于或小于其两个子节点的值，具体来说，如果父节点的值大于子节点的值，则为最大堆；如果父节点的值小于子节点的值，则为最小堆。&#xA;// This example demonstrates an integer heap built using the heap interface. package main import ( &amp;#34;container/heap&amp;#34; &amp;#34;fmt&amp;#34; ) // An IntHeap is a min-heap of ints. type IntHeap []int func (h IntHeap) Len() int { return len(h) } // 最大堆用 &amp;gt; func (h IntHeap) Less(i, j int) bool { return h[i] &amp;lt; h[j] } func (h IntHeap) Swap(i, j int) { h[i], h[j] = h[j], h[i] } func (h *IntHeap) Push(x any) { // Push and Pop use pointer receivers because they modify the slice&amp;#39;s length, // not just its contents.</description>
    </item>
    <item>
      <title>channel的使用</title>
      <link>http://localhost:1313/zh/post/golang/channel%E7%9A%84%E4%BD%BF%E7%94%A8/index.zh-cn/</link>
      <pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/zh/post/golang/channel%E7%9A%84%E4%BD%BF%E7%94%A8/index.zh-cn/</guid>
      <description>channel注意事项 在取值之前，如果管道关闭，可以一直取值不会报错，但是如果缓存区空了，会取到对应类型的零值。可以通过ok语句判断，值是否是缓冲区的还是零值。&#xA;//例1 func main() { ch := make(chan int, 2) ch &amp;lt;- 2 ch &amp;lt;- 0 close(ch) if v, ok := &amp;lt;-ch; ok { fmt.Println(&amp;#34;管道值:&amp;#34;, v) } if v, ok := &amp;lt;-ch; ok { fmt.Println(&amp;#34;管道值:&amp;#34;, v) } if v, ok := &amp;lt;-ch; ok { fmt.Println(&amp;#34;管道值:&amp;#34;, v) } //打印结果 //管道值: 2 //管道值: 0 } 或者也可以通过for语句取值，会把缓存区的值全部取出来，不需要ok判断。&#xA;//例子2 func main() { ch := make(chan int, 2) ch &amp;lt;- 2 ch &amp;lt;- 0 close(ch) for v := range ch { fmt.</description>
    </item>
    <item>
      <title>mongodb的使用</title>
      <link>http://localhost:1313/zh/post/%E6%95%B0%E6%8D%AE%E5%BA%93mongodb%E4%BD%BF%E7%94%A8/index.zh-cn/</link>
      <pubDate>Sat, 05 Nov 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/zh/post/%E6%95%B0%E6%8D%AE%E5%BA%93mongodb%E4%BD%BF%E7%94%A8/index.zh-cn/</guid>
      <description>安装 在mac下通过homebrew安装。 可以通过 brew search 搜索 mongodb。看有哪些版本。 brew install mongodb-community@5.0 这里安装mongodb-community@5.0版本 启动 mongodb服务器 通过brew在后台启动服务器，brew services start mongodb-community@5.0 mongodb客户端 mongosh 启动客户端 mongosh 或者 mongosh -u root -p root123 admin 命令 官方文档&#xA;collection对应mysql的table，文档对应mysql的一条记录。&#xA;数据库相关操作 show dbs 或者 show databases 显示所有数据库 use xxx 使用指定数据库，如果不存在会新建此数据库 db 显示当前正在使用的数据库 db.dropDatabase() 删除当前使用的数据库 collect(表)相关操作 运行命令前需要先执行进入到具体的某一个数据库才可以 use xxx&#xA;show collections 或者show tables 显示当前数据库的所有集合(表) 文档(记录)相关操作 假设插入了一个文档&#xA;db.inventory.insertMany( [ { item: &amp;#34;canvas&amp;#34;, qty: 100, size: { h: 28, w: 35.5, uom: &amp;#34;cm&amp;#34; }, status: &amp;#34;A&amp;#34; }, { item: &amp;#34;journal&amp;#34;, qty: 25, size: { h: 14, w: 21, uom: &amp;#34;cm&amp;#34; }, status: &amp;#34;A&amp;#34; }, { item: &amp;#34;mat&amp;#34;, qty: 85, size: { h: 27.</description>
    </item>
    <item>
      <title>redis使用</title>
      <link>http://localhost:1313/zh/post/%E6%95%B0%E6%8D%AE%E5%BA%93redis%E4%BD%BF%E7%94%A8/index.zh-cn/</link>
      <pubDate>Thu, 20 Oct 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/zh/post/%E6%95%B0%E6%8D%AE%E5%BA%93redis%E4%BD%BF%E7%94%A8/index.zh-cn/</guid>
      <description>redis：remote dictionary server 远程字典服务&#xA;安装 在mac下，通过homebrew安装，brew install redis&#xA;运行 redis也是c/s架构的，需要先启动redis服务器。&#xA;redis服务器 启动方式 通过brew启动 brew services start redis,这是后台启动 直接在终端执行 redis-server，这个是前台启动 关闭服务 如果是通过前台启动的，直接关闭终端就可以。 如果是通过brew启动的 brew services stop redis 也可以通过 客户端向服务端发送命令关闭 redis-cli shutdown 检查redis相关进程是否在运行 可以通过 命令 ps axu | grep redis redis客户端 必须先开启服务端服务，客户端才能正常工作。&#xA;命令行终端 启动方式 redis-cli redis-cli -h 127.0.0.1 -p 6379 redis-cli -h 127.0.0.1 -p 6379 -a password 退出方式 直接 输入exit 就可以。 可视化工具 RedisDesktopManager&#xA;语法 set操作 是字符串相关的操作&#xA;set key value 设置key的值为value get key 获取指定key的值 setex key value second 设置key的值为value,并在second秒后过期，在second秒后，get key 会为空 psetex key milliseconds value 设置key的值为value,并在milliseconds秒后过期，单位时毫秒 getset key value 设置key的值为value，并返回key的旧值 mset key1 value1 [key2 value2 .</description>
    </item>
    <item>
      <title>mysql数据库</title>
      <link>http://localhost:1313/zh/post/%E6%95%B0%E6%8D%AE%E5%BA%93mysql%E4%BD%BF%E7%94%A8/index.zh-cn/</link>
      <pubDate>Mon, 19 Sep 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/zh/post/%E6%95%B0%E6%8D%AE%E5%BA%93mysql%E4%BD%BF%E7%94%A8/index.zh-cn/</guid>
      <description>安装 服务端 下载链接&#xA;客户端 可以直接用vscode或者Pycharm提供的插件，也很方便。&#xA;常用命令 链接操作 链接数据库 mysql -h主机地址 -u用户名 -p用户密码 注意用户名和主机地址前可以有空格， 密码前不能有空格 本地一般是 mysql -u root -p 分两步，第二步输密码 指定ip和端口号 mysql -h 127.0.0.1 -u root -p -P 3306 mysql的默认端口是3306 数据库操作 在数据库里面操作末尾记得加上;分号表示命令结束。&#xA;show databases; 显示所有数据库 show create database database_name; 查看某个数据库的创建信息，可以看到数据库的编码格式等信息。 create database database_name; 创建数据库 create database database_name character set gbk; 可以指定编码格式 alter database database_name character set gbk; 修改数据库 只能修改编码格式，不能修改数据库名 drop database [if exists] spiders10; 删除数据库 use database_name; 进入某个数据库 select database(); 显示当前使用的是哪个数据库 表操作 需要先执行 use database_name; 进入到某个具体的数据库。</description>
    </item>
  </channel>
</rss>
