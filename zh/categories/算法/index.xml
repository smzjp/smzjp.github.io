<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on 我的 Hugo 网站</title>
    <link>http://localhost:1313/zh/categories/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on 我的 Hugo 网站</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 09 Apr 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/zh/categories/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>算法之递归</title>
      <link>http://localhost:1313/zh/post/golang/%E7%AE%97%E6%B3%95%E4%B9%8B%E9%80%92%E5%BD%92/index.zh-cn/</link>
      <pubDate>Tue, 09 Apr 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/zh/post/golang/%E7%AE%97%E6%B3%95%E4%B9%8B%E9%80%92%E5%BD%92/index.zh-cn/</guid>
      <description>递归一般有两种思路，一种是递，另一种是归。递是传递的意思，从递归开始的根节点开始计算，把计算数值通过递归函数的参数传递给下一个子节点，比如是用前序遍历，先计算跟节点，再计算左子树（先计算左子树里面的根节点），最后计算右子树。归是回归的意思，从叶子节点开始计算，把计算数值通过递归函数的返回参数返回给前一个父节点。也可以这么理解，递归算法都包含递和归的过程。如果是在递的过程中计算数值，就称为递的思想，如果是在归的过程中计算数值，就称为归的思想。&#xA;例子1，leetcode 1026题 给定二叉树的根节点 root，找出存在于 不同 节点 A 和 B 之间的最大值 V，其中 V = |A.val - B.val|，且 A 是 B 的祖先。&#xA;（如果 A 的任何子节点之一为 B，或者 A 的任何子节点是 B 的祖先，那么我们认为 A 是 B 的祖先）&#xA;递的思想(摘自leetcode题解) func maxAncestorDiff(root *TreeNode) (ans int) { var dfs func(*TreeNode, int, int) dfs = func(node *TreeNode, mn, mx int) { if node == nil { return } mn = min(mn, node.Val) mx = max(mx, node.Val) ans = max(ans, node.</description>
    </item>
    <item>
      <title>算法之二分查找</title>
      <link>http://localhost:1313/zh/post/golang/%E7%AE%97%E6%B3%95%E4%B9%8B%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/index.zh-cn/</link>
      <pubDate>Sat, 11 Nov 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/zh/post/golang/%E7%AE%97%E6%B3%95%E4%B9%8B%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/index.zh-cn/</guid>
      <description>有序数组的元素不重复，查找指定的目标元素 arr := []int{1, 2, 3, 4, 6, 9} target := 2 left := 0 right := len(arr) - 1 for left &amp;lt; right { mid := (left + right) / 2 fmt.Println(&amp;#34;mid:&amp;#34;, mid) if arr[mid] == target { right = mid } else if arr[mid] &amp;lt; target { left = mid + 1 } else if arr[mid] &amp;gt; target { right = mid - 1 } } fmt.Println(&amp;#34;left:&amp;#34;, left) 有序数组的元素会重复，查找指定的目标元素的左边界。 arr := []int{1, 2, 2, 2, 2, 3, 4, 6, 9} target := 2 if len(arr) == 0 { fmt.</description>
    </item>
  </channel>
</rss>
